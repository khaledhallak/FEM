clear all
clc
%%MAIN
runs=1;
for i=1:runs
    clear all
clc
%% User inputs
%disp("BASIC INPUTS");
LT=input("Total Length: ");   % total length of the beam 
LW=input("Total Width: ");   % total width of the beam 
NofElem_X=input('Number of horizontal elements: ');
NofElem_Y=input('Number of vertical elements: ');
E=input("Young's Modulus: ");  % young's modulus
b=input("Cross-section base: ");  % base cross-section 
h=input("Cross-section height: ");  % height of the cross-section 
 
I=(1/12)*(b)*(h)^3; 
%Iy=(1/12)*(h)*(b)^3;
%J=Iy*0.229;
A=b*h;
v=input("Poisson's Ratio: ");
Hx=NofElem_X+1; %number of nodes
Hy=NofElem_Y+1; %number of nodes
L_x= LT/NofElem_X; % length of the horozontal element
L_y= LW/NofElem_Y; % length of the vertical element
 
if b>1/5*L_x||b>1/5*L_y
disp("The thickness of the element doesnt meet the fifth of the smallest element length! Execution terminated")
    break
end
 
Ytot=NofElem_Y+(NofElem_Y*NofElem_X); % total number of elements in the y-direction 
Xtot=NofElem_X+(NofElem_Y*NofElem_X); % total number of elements in the x-direction 
DOF_Node=3;
Nodes = Hx * Hy; % number of total nodes
 
 
%% for Nodes
Node=zeros(Hx*Hy,3);
s=0;
for i=1:Hy
    for j=1:Hx
    s=s+1;
    Node(s,1)=s; % number of nodes
    Node(s,2)=(j-1)*L_x; % x-coordinate of node
    Node(s,3)=(i-1)*L_y; % y-coordinate of node
 
    end
end
 
%% for elements in the x-direction
s=0;
elem=zeros(NofElem_X*(NofElem_Y+1)+(NofElem_Y*(NofElem_X+1)),3);
for j=1:NofElem_Y+1
    for i=1:NofElem_X
        s=s+1;
        elem(s,1)= s; % number of element
        elem(s,2)=(j-1)*Hx+i; % elements starting node
        elem(s,3)=(j-1)*Hx+i+1; % elements ending node
    end
end
 
%% for elements in the y-direction
for i=1:NofElem_X+1
    for j=1:NofElem_Y
        s=s+1;
        elem(s,1)=s; % number of element
        elem(s,2)=(j-1)*Hx+i; % elements starting node
        elem(s,3)=j*Hx+i; % elements ending node
    end
end
if (NofElem_Y==0)
Node(:,3)=zeros(1,Hx);
L_y=0;
end
if (NofElem_X==0)
Node(:,2)=zeros(1,Hy);
L_x=0;
end
 
%% Plotting nodes and elements as a grid
figure;
hold on;
 
% Plot nodes with numbering
for i = 1:size(Node, 1)
    text(Node(i, 2), Node(i, 3), num2str(Node(i, 1)), 'HorizontalAlignment', 'center', 'VerticalAlignment', 'middle');
end
 
% Plot elements with numbering
for i = 1:size(elem, 1)
    start_node = elem(i, 2);
    end_node = elem(i, 3);
    x = [Node(start_node, 2), Node(end_node, 2)];
    y = [Node(start_node, 3), Node(end_node, 3)];
    plot(x, y, 'b-', 'LineWidth', 2); % Plotting elements as blue lines
    mid_x = (Node(start_node, 2) + Node(end_node, 2)) / 2;
    mid_y = (Node(start_node, 3) + Node(end_node, 3)) / 2;
    text(mid_x, mid_y, num2str(elem(i, 1)), 'HorizontalAlignment', 'center', 'VerticalAlignment', 'middle');
end
 
xlabel('X-axis');
ylabel('Y-axis');
title('Grid of Nodes and Elements');
grid on;
axis equal;
hold off;
 
 
%% shape function to transform from local to global for elements in the x-direction theta = 0 
Tx=[1 0 0 0 0 0;
    0 1 0 0 0 0;
    0 0 1 0 0 0;
    0 0 0 1 0 0;
    0 0 0 0 1 0;
    0 0 0 0 0 1];
 
%% shape function to transform form local to global for elements in the y-direction theta = 90 degrees
Ty=[0 -1 0 0 0 0 ;...
    1 0 0 0 0 0 ;...
    0 0 1 0 0 0;
    0 0 0 0 -1 0;
    0 0 0 1 0 0;
    0 0 0 0 0 1];
 
%% k global for elements in the x-direction 
if(NofElem_X==0)
    m=Ytot;
 kx(:,:,m)=0*[A/L_x 0 0 -A/L_x 0 0;0 12*I/L_x^3 6*I/L_x^2 0 -12*I/L_x^3 6*I/L_x^2;...
              0 6*I/L_x^2 4*I/L_x 0 -6*I/L_x^2 2*I/L_x;-A/L_x 0 0 A/L_x 0 0;...
              0 -12*I/L_x^3 -6*I/L_x^2 0 12*I/L_x^3 -6*I/L_x^2;0 6*I/L_x^2 2*I/L_x 0 -6*I/L_x^2 4*I/L_x];
else
for m=1:Xtot
 
kx(:,:,m)=E*[A/L_x 0 0 -A/L_x 0 0;0 12*I/L_x^3 6*I/L_x^2 0 -12*I/L_x^3 6*I/L_x^2;...
              0 6*I/L_x^2 4*I/L_x 0 -6*I/L_x^2 2*I/L_x;-A/L_x 0 0 A/L_x 0 0;...
              0 -12*I/L_x^3 -6*I/L_x^2 0 12*I/L_x^3 -6*I/L_x^2;0 6*I/L_x^2 2*I/L_x 0 -6*I/L_x^2 4*I/L_x];
 
 
  kx(:,:,m)=Tx'*kx(:,:,m)*Tx;
 
end
end
%% k global for elements in the y-direction
if(NofElem_Y==0)
    m=Xtot;
    ky(:,:,m)=0*[A/L_y 0 0 -A/L_y 0 0;0 12*I/L_y^3 6*I/L_y^2 0 -12*I/L_y^3 6*I/L_y^2;...
              0 6*I/L_y^2 4*I/L_y 0 -6*I/L_y^2 2*I/L_y;-A/L_y 0 0 A/L_y 0 0;...
              0 -12*I/L_y^3 -6*I/L_y^2 0 12*I/L_y^3 -6*I/L_y^2;0 6*I/L_y^2 2*I/L_y 0 -6*I/L_y^2 4*I/L_y];
else
for m=1:Ytot
    
ky(:,:,m)=E*[A/L_y 0 0 -A/L_y 0 0;0 12*I/L_y^3 6*I/L_y^2 0 -12*I/L_y^3 6*I/L_y^2;...
              0 6*I/L_y^2 4*I/L_y 0 -6*I/L_y^2 2*I/L_y;-A/L_y 0 0 A/L_y 0 0;...
              0 -12*I/L_y^3 -6*I/L_y^2 0 12*I/L_y^3 -6*I/L_y^2;0 6*I/L_y^2 2*I/L_y 0 -6*I/L_y^2 4*I/L_y];
 
  ky(:,:,m)=Ty'*ky(:,:,m)*Ty;
   
end
end
%% Adding up global stiffness matrix
ke(:,:,1:Xtot)=kx(:,:,1:Xtot);
ke(:,:,Xtot+1:(Ytot+Xtot))=ky(:,:,1:Ytot);
k_global= zeros(DOF_Node*size(Node,1), DOF_Node*size(Node,1)); % Initialize global stiffness matrix
 
for m=1:Xtot+Ytot
    dof(m,:)=[DOF_Node*elem(m,2)-2 DOF_Node*elem(m,2)-1 DOF_Node*elem(m,2) ...
        DOF_Node*elem(m,3)-2 DOF_Node*elem(m,3)-1 DOF_Node*elem(m,3)]; %DOF's of each element
    for i1 =1:2*DOF_Node
        for j1= 1:2*DOF_Node
            k_global(dof(m,i1),dof(m,j1))=k_global(dof(m,i1),dof(m,j1))+ke(i1,j1,m);
        end
    end
end
k_global;
 
%% Force distribution
F = zeros(3 * Nodes, 1);
% Force distribution
disp('FORCE DISTRIBUTION');
num_force_types = input('How many types of forces do you want to apply? ');
 
for force_index = 1:num_force_types
    % Prompt user for force type
    disp(['Force Type ', num2str(force_index)]);
    force_type = input('Enter the type of force (1 for Concentrated Load or 2 for Rectangular Uniform: ');
    
    if force_type == 1 % Concentrated Load
        num_nodes = input('How many nodes do you want to apply concentrated load to? ');
        for k = 1:num_nodes
            node_num = input(sprintf('Enter node number for concentrated load %d: ', k));
            Fx = input(sprintf('Magnitude of Fx for node %d: ', node_num));
            Fy = input(sprintf('Magnitude of Fy for node %d: ', node_num));
            Mz = input(sprintf('Magnitude of Mz for node %d: ', node_num));
            % Fill F matrix
            F(3*(node_num-1) + 1) = Fx;
            F(3*(node_num-1) + 2) = Fy;
            F(3*(node_num-1) + 3) = Mz;
        end
   
    elseif force_type == 2 % Rectangular Uniform
        start_node = input('Enter start node for rectangular uniform force distribution: ');
        end_node = input('Enter end node for rectangular uniform force distribution: ');
        Fy = input('Magnitude of Fy for rectangular uniform force distribution: ');
        
        % Determine nodes between start and end nodes
        if start_node < end_node
            nodes_between = start_node:end_node;
        else
            nodes_between = end_node:start_node;
        end
        
        % Calculate force and moment for each node
        for node_num = nodes_between
            if node_num == start_node || node_num == end_node
                Fy_node = Fy * L_x / 2;
            else
                Fy_node = 2 * Fy * L_x / 2;
            end            
            % Add Fy to the F matrix
            F(3*(node_num-1) + 2) = F(3*(node_num-1) + 2) + Fy_node;            
            % Add Mz at the first node of the element (clockwise)
            if node_num == start_node
                Mz_start = -Fy * L_x ^ 2 / 12; % Clockwise
                F(3*(node_num-1) + 3) = F(3*(node_num-1) + 3) + Mz_start;
            end
            
            % Add Mz at the second node of the element (counterclockwise)
            if node_num == end_node
                Mz_end = -Fy * L_x ^ 2 / 12; % Counterclockwise
                F(3*(node_num-1) + 3) = F(3*(node_num-1) + 3) + Mz_end;
            end
        end
    end
end
%% fixtures on nodes
restrained = []; 
num_fixture_types = input('Enter the number of types of fixtures you want to apply: ');
num_walls=0;
num_rollers = 0;
num_pins = 0;
for type_index = 1:num_fixture_types
    % Prompt user for fixture type
    fixture_type = input(sprintf('Enter the type of fixture for type %d (1 for Wall, 2 for Roller, 3 for Pin): ', type_index));
    stability(type_index)=fixture_type;
    
    % Enable user to assign fixtures by clicking on the grid
    figure;
    hold on;
    
    % Plot grid lines
    for i = 1:Hx
        x = (i - 1) * L_x;
        plot([x, x], [0, LW], 'k'); % Vertical lines
    end
    for j = 1:Hy
        y = (j - 1) * L_y;
        plot([0, LT], [y, y], 'k'); % Horizontal lines
    end
    
    % Enable user to assign fixtures by clicking on the grid
    disp('Click on the grid to assign fixtures. Press ENTER when finished.');
    [x_fix, y_fix] = ginput;
    if L_y==0
    L_y=1;
    end
    if L_x==0
        L_x=1;
    end
    fixtures = round([x_fix, y_fix] ./ [L_x, L_y]) .* [L_x, L_y]; % Round to nearest node
    
    % Plot fixtures
    for i = 1:size(fixtures, 1)
        plot(fixtures(i, 1), fixtures(i, 2), 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'r'); % Plot fixture
    end
    
    % Display fixed nodes with node numbers
    fixed_nodes = unique(fixtures, 'rows');
    matching_nodes = [];
    for i = 1:size(fixed_nodes, 1)
        node_number = (fixed_nodes(i, 2)/L_y) * Hx + (fixed_nodes(i, 1)/L_x) + 1; % Calculate node number
        matching_nodes = [matching_nodes; node_number]; % Collect matching node numbers
        text(fixed_nodes(i, 1), fixed_nodes(i, 2), ['Fixed Node ', num2str(node_number)], 'HorizontalAlignment', 'center', 'VerticalAlignment', 'bottom');
    end
    
    % Output the number of Nodes for the matching fixed nodes
    disp(['Matching Nodes for Fixture Type ', num2str(fixture_type), ':']);
    disp(matching_nodes);
    
    hold off;
    axis equal;
    xlabel('X coordinate');
    ylabel('Y coordinate');
    title(['Grid with Fixtures (Type ', num2str(fixture_type), ')']);
    
    % Fill the restrained array based on the fixture type and number of DOFs per node
    for j = 1:length(matching_nodes)
        if fixture_type == 1 % Wall
            restrained = [restrained; (matching_nodes(j) * DOF_Node - DOF_Node + 1:matching_nodes(j) * DOF_Node)'];
            num_walls=num_walls+1;
        elseif fixture_type == 2 % Roller
            restrained = [restrained; (matching_nodes(j) * DOF_Node - DOF_Node + 2)']; % Remove the second DOF (Fy)
            num_rollers=num_rollers+1;
        elseif fixture_type == 3 % Pin
            restrained = [restrained; (matching_nodes(j) * DOF_Node - DOF_Node + 1:matching_nodes(j) * DOF_Node - DOF_Node + 2)']; % Remove the first and second DOFs (Fx and Fy)
            num_pins=num_pins+1;
        end
    end
end
% Check stability conditions
        if all(stability == 2) || (num_rollers > 0 && num_pins == 1 && num_walls==0)
           disp('Invalid stability condition. Please input fixture types again.');
            stability = [];
        
%% removing restrictions from matrix to solve it 
        else
sorted_A = sort(restrained, 'ascend');      % sort elements of A in ascending order
total_freedoms=1:1:DOF_Node*Nodes;
free_freedoms=setxor(total_freedoms,restrained);
k_global_restrained=k_global(free_freedoms,free_freedoms);
F_Freefreedoms=F(free_freedoms);
U(free_freedoms)=k_global_restrained\F_Freefreedoms;
U=U'
disp(U);
        end
 
end
